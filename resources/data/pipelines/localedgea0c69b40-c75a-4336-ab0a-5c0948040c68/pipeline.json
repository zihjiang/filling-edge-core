{
  "schemaVersion": 6,
  "version": 22,
  "pipelineId": "localedgea0c69b40-c75a-4336-ab0a-5c0948040c68",
  "title": "local edge",
  "description": "",
  "uuid": "ed69163c-a651-4b35-b003-325956a62edf",
  "configuration": [
    {
      "name": "executionMode",
      "value": "EDGE"
    },
    {
      "name": "edgeHttpUrl",
      "value": "http://localhost:18633"
    },
    {
      "name": "deliveryGuarantee",
      "value": "AT_LEAST_ONCE"
    },
    {
      "name": "testOriginStage",
      "value": "streamsets-datacollector-dev-lib::com_streamsets_pipeline_stage_devtest_rawdata_RawDataDSource::3"
    },
    {
      "name": "startEventStage",
      "value": "streamsets-datacollector-basic-lib::com_streamsets_pipeline_stage_destination_devnull_ToErrorNullDTarget::1"
    },
    {
      "name": "stopEventStage",
      "value": "streamsets-datacollector-basic-lib::com_streamsets_pipeline_stage_destination_devnull_ToErrorNullDTarget::1"
    },
    {
      "name": "shouldRetry",
      "value": true
    },
    {
      "name": "triggerInterval",
      "value": 2000
    },
    {
      "name": "retryAttempts",
      "value": -1
    },
    {
      "name": "ludicrousMode",
      "value": false
    },
    {
      "name": "ludicrousModeInputCount",
      "value": false
    },
    {
      "name": "advancedErrorHandling",
      "value": false
    },
    {
      "name": "notifyOnStates",
      "value": [
        "RUN_ERROR",
        "STOPPED",
        "FINISHED"
      ]
    },
    {
      "name": "emailIDs",
      "value": []
    },
    {
      "name": "constants",
      "value": []
    },
    {
      "name": "badRecordsHandling",
      "value": "streamsets-datacollector-basic-lib::com_streamsets_pipeline_stage_destination_devnull_ToErrorNullDTarget::1"
    },
    {
      "name": "errorRecordPolicy",
      "value": "ORIGINAL_RECORD"
    },
    {
      "name": "statsAggregatorStage",
      "value": "streamsets-datacollector-basic-lib::com_streamsets_pipeline_stage_destination_devnull_StatsDpmDirectlyDTarget::1"
    },
    {
      "name": "workerCount",
      "value": 0
    },
    {
      "name": "clusterSlaveMemory",
      "value": 2048
    },
    {
      "name": "clusterSlaveJavaOpts",
      "value": "-XX:+UseConcMarkSweepGC -XX:+UseParNewGC -Dlog4j.debug"
    },
    {
      "name": "clusterLauncherEnv",
      "value": []
    },
    {
      "name": "mesosDispatcherURL",
      "value": null
    },
    {
      "name": "logLevel",
      "value": "INFO"
    },
    {
      "name": "hdfsS3ConfDir",
      "value": null
    },
    {
      "name": "rateLimit",
      "value": 0
    },
    {
      "name": "maxRunners",
      "value": 0
    },
    {
      "name": "runnerIdleTIme",
      "value": 60
    },
    {
      "name": "shouldCreateFailureSnapshot",
      "value": true
    },
    {
      "name": "webhookConfigs",
      "value": []
    },
    {
      "name": "sparkConfigs",
      "value": []
    },
    {
      "name": "preprocessScript",
      "value": "/*\nThe following script define a method\nthat increments an integer by 1 \nand registers it as a UDF with \nthe SparkSession, which can be accessed\nusing the variable named \"spark\":\ndef inc(i: Integer): Integer = {\n  i + 1\n}\nspark.udf.register (\"inc\", inc _)\n\n*/"
    },
    {
      "name": "clusterConfig.clusterType",
      "value": "LOCAL"
    },
    {
      "name": "clusterConfig.sparkMasterUrl",
      "value": "local[*]"
    },
    {
      "name": "clusterConfig.deployMode",
      "value": "CLIENT"
    },
    {
      "name": "clusterConfig.hadoopUserName",
      "value": null
    },
    {
      "name": "clusterConfig.sparkAppName",
      "value": "${pipeline:title()}"
    },
    {
      "name": "clusterConfig.stagingDir",
      "value": "/streamsets"
    },
    {
      "name": "clusterConfig.useYarnKerberosKeytab",
      "value": false
    },
    {
      "name": "clusterConfig.yarnKerberosKeytabSource",
      "value": "PROPERTIES_FILE"
    },
    {
      "name": "clusterConfig.yarnKerberosKeytab",
      "value": null
    },
    {
      "name": "clusterConfig.yarnKerberosKeytabBase64Bytes",
      "value": null
    },
    {
      "name": "clusterConfig.yarnKerberosPrincipal",
      "value": "name@DOMAIN"
    },
    {
      "name": "clusterConfig.callbackUrl",
      "value": null
    },
    {
      "name": "databricksConfig.baseUrl",
      "value": null
    },
    {
      "name": "databricksConfig.credentialType",
      "value": "TOKEN"
    },
    {
      "name": "databricksConfig.username",
      "value": null
    },
    {
      "name": "databricksConfig.password",
      "value": null
    },
    {
      "name": "databricksConfig.token",
      "value": null
    },
    {
      "name": "databricksConfig.provisionNewCluster",
      "value": true
    },
    {
      "name": "databricksConfig.clusterId",
      "value": null
    },
    {
      "name": "databricksConfig.clusterConfig",
      "value": "{\n    \"num_workers\": 8,\n    \"spark_version\": \"5.3.x-scala2.11\",\n    \"node_type_id\": \"i3.xlarge\"\n}"
    },
    {
      "name": "databricksConfig.terminateCluster",
      "value": false
    },
    {
      "name": "livyConfig.baseUrl",
      "value": "https://localhost:30443/gateway/default/livy/v1/"
    },
    {
      "name": "livyConfig.username",
      "value": null
    },
    {
      "name": "livyConfig.password",
      "value": null
    },
    {
      "name": "sdcEmrConnectionSelection",
      "value": "MANUAL"
    },
    {
      "name": "sdcEmrConnection.awsConfig.credentialMode",
      "value": "WITH_CREDENTIALS"
    },
    {
      "name": "sdcEmrConnection.awsConfig.awsAccessKeyId",
      "value": null
    },
    {
      "name": "sdcEmrConnection.awsConfig.awsSecretAccessKey",
      "value": null
    },
    {
      "name": "sdcEmrConnection.awsConfig.roleARN",
      "value": "arn:aws:iam::\u003caccount-id\u003e:role/role-name"
    },
    {
      "name": "sdcEmrConnection.awsConfig.roleSessionName",
      "value": null
    },
    {
      "name": "sdcEmrConnection.awsConfig.sessionDuration",
      "value": 3600
    },
    {
      "name": "sdcEmrConnection.awsConfig.setSessionTags",
      "value": true
    },
    {
      "name": "sdcEmrConnection.region",
      "value": "US_WEST_2"
    },
    {
      "name": "sdcEmrConnection.customRegion",
      "value": null
    },
    {
      "name": "sdcEmrConnection.s3StagingUri",
      "value": null
    },
    {
      "name": "sdcEmrConnection.provisionNewCluster",
      "value": false
    },
    {
      "name": "sdcEmrConnection.clusterId",
      "value": null
    },
    {
      "name": "sdcEmrConnection.emrVersion",
      "value": null
    },
    {
      "name": "sdcEmrConnection.clusterPrefix",
      "value": null
    },
    {
      "name": "sdcEmrConnection.terminateCluster",
      "value": true
    },
    {
      "name": "sdcEmrConnection.loggingEnabled",
      "value": true
    },
    {
      "name": "sdcEmrConnection.s3LogUri",
      "value": null
    },
    {
      "name": "sdcEmrConnection.serviceRole",
      "value": "EMR_DefaultRole"
    },
    {
      "name": "sdcEmrConnection.jobFlowRole",
      "value": "EMR_EC2_DefaultRole"
    },
    {
      "name": "sdcEmrConnection.visibleToAllUsers",
      "value": true
    },
    {
      "name": "sdcEmrConnection.ec2SubnetId",
      "value": null
    },
    {
      "name": "sdcEmrConnection.masterSecurityGroup",
      "value": null
    },
    {
      "name": "sdcEmrConnection.slaveSecurityGroup",
      "value": null
    },
    {
      "name": "sdcEmrConnection.serviceAccessSecurityGroup",
      "value": null
    },
    {
      "name": "sdcEmrConnection.instanceCount",
      "value": 2
    },
    {
      "name": "sdcEmrConnection.stepConcurrency",
      "value": 1
    },
    {
      "name": "sdcEmrConnection.masterInstanceType",
      "value": null
    },
    {
      "name": "sdcEmrConnection.masterInstanceTypeCustom",
      "value": null
    },
    {
      "name": "sdcEmrConnection.slaveInstanceType",
      "value": null
    },
    {
      "name": "sdcEmrConnection.slaveInstanceTypeCustom",
      "value": null
    },
    {
      "name": "enableEMRDebugging",
      "value": true
    },
    {
      "name": "transformerEmrConnectionSelection",
      "value": "MANUAL"
    },
    {
      "name": "transformerEmrConnection.awsConfig.credentialMode",
      "value": "WITH_CREDENTIALS"
    },
    {
      "name": "transformerEmrConnection.awsConfig.awsAccessKeyId",
      "value": null
    },
    {
      "name": "transformerEmrConnection.awsConfig.awsSecretAccessKey",
      "value": null
    },
    {
      "name": "transformerEmrConnection.awsConfig.roleARN",
      "value": "arn:aws:iam::\u003caccount-id\u003e:role/role-name"
    },
    {
      "name": "transformerEmrConnection.awsConfig.roleSessionName",
      "value": null
    },
    {
      "name": "transformerEmrConnection.awsConfig.sessionDuration",
      "value": 3600
    },
    {
      "name": "transformerEmrConnection.awsConfig.setSessionTags",
      "value": true
    },
    {
      "name": "transformerEmrConnection.region",
      "value": "US_WEST_2"
    },
    {
      "name": "transformerEmrConnection.customRegion",
      "value": null
    },
    {
      "name": "transformerEmrConnection.s3StagingUri",
      "value": null
    },
    {
      "name": "transformerEmrConnection.provisionNewCluster",
      "value": false
    },
    {
      "name": "transformerEmrConnection.clusterId",
      "value": null
    },
    {
      "name": "transformerEmrConnection.emrVersion",
      "value": null
    },
    {
      "name": "transformerEmrConnection.clusterPrefix",
      "value": null
    },
    {
      "name": "transformerEmrConnection.terminateCluster",
      "value": true
    },
    {
      "name": "transformerEmrConnection.loggingEnabled",
      "value": true
    },
    {
      "name": "transformerEmrConnection.s3LogUri",
      "value": null
    },
    {
      "name": "transformerEmrConnection.serviceRole",
      "value": "EMR_DefaultRole"
    },
    {
      "name": "transformerEmrConnection.jobFlowRole",
      "value": "EMR_EC2_DefaultRole"
    },
    {
      "name": "transformerEmrConnection.visibleToAllUsers",
      "value": true
    },
    {
      "name": "transformerEmrConnection.ec2SubnetId",
      "value": null
    },
    {
      "name": "transformerEmrConnection.masterSecurityGroup",
      "value": null
    },
    {
      "name": "transformerEmrConnection.slaveSecurityGroup",
      "value": null
    },
    {
      "name": "transformerEmrConnection.serviceAccessSecurityGroup",
      "value": null
    },
    {
      "name": "transformerEmrConnection.instanceCount",
      "value": 2
    },
    {
      "name": "transformerEmrConnection.stepConcurrency",
      "value": 1
    },
    {
      "name": "transformerEmrConnection.masterInstanceType",
      "value": null
    },
    {
      "name": "transformerEmrConnection.masterInstanceTypeCustom",
      "value": null
    },
    {
      "name": "transformerEmrConnection.slaveInstanceType",
      "value": null
    },
    {
      "name": "transformerEmrConnection.slaveInstanceTypeCustom",
      "value": null
    },
    {
      "name": "transformerEMRConfig.encryption",
      "value": "NONE"
    },
    {
      "name": "transformerEMRConfig.kmsKeyId",
      "value": null
    },
    {
      "name": "googleCloudCredentialsConfig.projectId",
      "value": null
    },
    {
      "name": "googleCloudCredentialsConfig.credentialsProvider",
      "value": "DEFAULT_PROVIDER"
    },
    {
      "name": "googleCloudCredentialsConfig.path",
      "value": null
    },
    {
      "name": "googleCloudCredentialsConfig.credentialsFileContent",
      "value": null
    },
    {
      "name": "googleCloudConfig.region",
      "value": null
    },
    {
      "name": "googleCloudConfig.customRegion",
      "value": null
    },
    {
      "name": "googleCloudConfig.gcsStagingUri",
      "value": null
    },
    {
      "name": "googleCloudConfig.create",
      "value": false
    },
    {
      "name": "googleCloudConfig.clusterPrefix",
      "value": null
    },
    {
      "name": "googleCloudConfig.version",
      "value": "1.4-ubuntu18"
    },
    {
      "name": "googleCloudConfig.masterType",
      "value": null
    },
    {
      "name": "googleCloudConfig.workerType",
      "value": null
    },
    {
      "name": "googleCloudConfig.networkType",
      "value": null
    },
    {
      "name": "googleCloudConfig.network",
      "value": null
    },
    {
      "name": "googleCloudConfig.subnet",
      "value": null
    },
    {
      "name": "googleCloudConfig.tags",
      "value": []
    },
    {
      "name": "googleCloudConfig.workerCount",
      "value": 2
    },
    {
      "name": "googleCloudConfig.clusterName",
      "value": null
    },
    {
      "name": "googleCloudConfig.terminate",
      "value": null
    }
  ],
  "uiInfo": {
    "displayMode": "ADVANCED",
    "previewConfig": {
      "batchSize": 10,
      "executeLifecycleEvents": false,
      "previewSource": "CONFIGURED_SOURCE",
      "rememberMe": false,
      "showFieldType": true,
      "showHeader": false,
      "timeout": 30000,
      "writeToDestinations": true
    }
  },
  "stages": [
    {
      "instanceName": "SystemMetrics_01",
      "library": "streamsets-datacollector-basic-lib",
      "stageName": "com_streamsets_pipeline_stage_origin_systemmetrics_SystemMetricsDSource",
      "stageVersion": "2",
      "configuration": [
        {
          "name": "conf.delay",
          "value": 2000
        },
        {
          "name": "conf.fetchHostInfo",
          "value": true
        },
        {
          "name": "conf.fetchCpuStats",
          "value": true
        },
        {
          "name": "conf.fetchMemStats",
          "value": true
        },
        {
          "name": "conf.fetchDiskStats",
          "value": true
        },
        {
          "name": "conf.fetchNetStats",
          "value": true
        },
        {
          "name": "conf.fetchProcessStats",
          "value": false
        },
        {
          "name": "conf.processConf.processRegexStr",
          "value": ".*"
        },
        {
          "name": "conf.processConf.userRegexStr",
          "value": ".*"
        },
        {
          "name": "stageOnRecordError",
          "value": "TO_ERROR"
        }
      ],
      "services": [],
      "uiInfo": {
        "description": "",
        "displayMode": "BASIC",
        "icon": "metrics.png",
        "label": "System Metrics 1",
        "stageType": "SOURCE",
        "xPos": 60,
        "yPos": 50
      },
      "inputLanes": [],
      "outputLanes": [
        "SystemMetrics_01OutputLane16335910619680"
      ],
      "eventLanes": []
    },
    {
      "instanceName": "JavaScriptEvaluator_01",
      "library": "streamsets-datacollector-basic-lib",
      "stageName": "com_streamsets_pipeline_stage_processor_javascript_JavaScriptDProcessor",
      "stageVersion": "3",
      "configuration": [
        {
          "name": "processingMode",
          "value": "BATCH"
        },
        {
          "name": "initScript",
          "value": "/**\n * Available Objects:\n *\n *   sdc.state: a dict that is preserved between invocations of this script.\n *         Useful for caching bits of data e.g. counters and long-lived resources.\n *\n *   sdc.log.\u003cloglevel\u003e(msg, obj...): use instead of print to send log messages to the log4j log instead of stdout.\n *                               loglevel is any log4j level: e.g. info, error, warn, trace.\n *   sdc.getFieldNull(Record, 'field path'): Receive a constant defined above\n *                          to check if the field is typed field with value null\n *   sdc.createMap(boolean listMap): Create a map for use as a field in a record.\n *                          Pass true to this function to create a list map (ordered map)\n */\n\n// sdc.state['connection'] = new Connection().open();\n"
        },
        {
          "name": "script",
          "value": "/**\n * Available constants:\n *   They are to assign a type to a field with a value null.\n *   sdc.NULL_BOOLEAN, sdc.NULL_CHAR, sdc.NULL_BYTE, sdc.NULL_SHORT, sdc.NULL_INTEGER, sdc.NULL_LONG,\n *   sdc.NULL_FLOAT, sdc.NULL_DOUBLE, sdc.NULL_DATE, sdc.NULL_DATETIME, sdc.NULL_TIME, sdc.NULL_DECIMAL,\n *   sdc.NULL_BYTE_ARRAY, sdc.NULL_STRING, sdc.NULL_LIST, sdc.NULL_MAP\n *\n * Available Objects:\n *\n *  sdc.records: an array of records to process, depending on the JavaScript processor\n *           processing mode it may have 1 record or all the records in the batch.\n *\n *  sdc.state: a dict that is preserved between invocations of this script.\n *        Useful for caching bits of data e.g. counters.\n *\n *  sdc.log.\u003cloglevel\u003e(msg, obj...): use instead of print to send log messages to the log4j log instead of stdout.\n *                               loglevel is any log4j level: e.g. info, error, warn, trace.\n *\n *  sdc.output.write(record): writes a record to processor output\n *\n *  sdc.error.write(record, message): sends a record to error\n *\n *  sdc.getFieldNull(Record, 'field path'): Receive a constant defined above\n *                            to check if the field is typed field with value null\n *  sdc.createRecord(String recordId): Creates a new record.\n *                            Pass a recordId to uniquely identify the record and include enough information to track down the record source.\n *  sdc.createMap(boolean listMap): Create a map for use as a field in a record.\n *                            Pass true to this function to create a list map (ordered map)\n *\n *  sdc.createEvent(String type, int version): Creates a new event.\n *                            Create new empty event with standard headers.\n *  sdc.toEvent(Record): Send event to event stream\n *                            Only events created with sdcFunctions.createEvent are supported.\n *  sdc.isPreview(): Determine if pipeline is in preview mode.\n *\n * Available Record Header Variables:\n *\n *  record.attributes: a map of record header attributes.\n *  record.\u003cheader name\u003e: get the value of 'header name'.\n */\n\n// Sample JavaScript code\nfor(var i = 0; i \u003c records.length; i++) {\n    try {\n        // Change record root field value to a STRING value\n        // records[i].value = 'Hello ' + i;\n\n        // Change record root field value to a MAP value and create an entry\n        // records[i].value = { V : 'Hello' };\n\n        // Access a MAP entry\n        // records[i].value.X = records[i].value['V'] + ' World';\n\n        // Modify a MAP entry\n        // records[i].value.V = 5;\n\n        // Create an ARRAY entry\n        // records[i].value.A = ['Element 1', 'Element 2'];\n\n        // Access a Array entry\n        // records[i].value.B = records[i].value['A'][0];\n\n        // Modify an existing ARRAY entry\n        // records[i].value.A[0] = 100;\n\n        // Assign a integer type to a field and value null;\n        // records[i].value.null_int = NULL_INTEGER\n\n        // Check if the field is NULL_INTEGER. If so, assign a value\n        // if(sdc.getFieldNull(records[i], '/null_int') == NULL_INTEGER)\n        //    records[i].value.null_int = 123\n\n        // Direct access to the underlying Data Collector Record. Use for read-only operations.\n        // fieldAttr = records[i].sdcRecord.get('/value').getAttribute('attr')\n\n        // Create a new record with map field\n        // var newRecord = sdc.createRecord(records[i].sourceId + ':newRecordId');\n        // newRecord.value = {'field1' : 'val1', 'field2' : 'val2'};\n        // sdc.output.write(newRecord);\n        // Create a new map and add it to the original record\n        // var newMap = sdc.createMap(true);\n        // newMap['key'] = 'value';\n        // records[i].value['b'] = newMap;\n\n        // Applies if the source uses WHOLE_FILE as data format\n        // var input_stream = record.value['fileRef'].getInputStream();\n        // try {\n        //     input_stream.read(); //Process the input stream\n        // } finally {\n        //     input_stream.close()\n        // }\n\n        // Modify a header attribute entry\n        // records[i].attributes['name'] = records[i].attributes['first_name'] + ' ' + records[i].attributes['last_name']\n\n        // Get a record header with field names ex. get sourceId and errorCode\n        // var sourceId = records[i].sourceId\n        // var errorCode = ''\n        // if (records[i].errorCode) {\n        //     errorCode = records[i].errorCode\n        // }\n\n        // Write record to processor output\n        output.write(records[i]);\n    } catch (e) {\n        // Send record to error\n        error.write(records[i], e);\n    }\n}"
        },
        {
          "name": "destroyScript",
          "value": "/**\n * Available Objects:\n *\n *   sdc.state: a dict that is preserved between invocations of this script.\n *        Useful for caching bits of data e.g. counters and long-lived resources.\n *   sdc.log.\u003cloglevel\u003e(msg, obj...): use instead of print to send log messages to the log4j log instead of stdout.\n *                               loglevel is any log4j level: e.g. info, error, warn, trace.\n *   sdc.getFieldNull(Record, 'field path'): Receive a constant defined above\n *                          to check if the field is typed field with value null\n *   sdc.createMap(boolean listMap): Create a map for use as a field in a record.\n *                          Pass true to this function to create a list map (ordered map)\n *   sdc.createEvent(String type, int version): Creates a new event.\n *                          Create new empty event with standard headers.\n *   sdc.toEvent(Record): Send event to event stream\n *                          Only events created with sdc.createEvent are supported.\n */\n\n// sdc.state['connection'].close();\n"
        },
        {
          "name": "scriptRecordType",
          "value": "NATIVE_OBJECTS"
        },
        {
          "name": "userParams",
          "value": []
        },
        {
          "name": "stageOnRecordError",
          "value": "TO_ERROR"
        },
        {
          "name": "stageRequiredFields",
          "value": []
        },
        {
          "name": "stageRecordPreconditions",
          "value": []
        }
      ],
      "services": [],
      "uiInfo": {
        "description": "",
        "displayMode": "BASIC",
        "icon": "javascript.png",
        "label": "JavaScript Evaluator 1",
        "stageType": "PROCESSOR",
        "xPos": 279,
        "yPos": 50
      },
      "inputLanes": [
        "SystemMetrics_01OutputLane16335910619680"
      ],
      "outputLanes": [
        "JavaScriptEvaluator_01OutputLane16336119381710"
      ],
      "eventLanes": []
    },
    {
      "instanceName": "KafkaProducer_01",
      "library": "streamsets-datacollector-apache-kafka_2_7-lib",
      "stageName": "com_streamsets_pipeline_stage_destination_kafka_KafkaDTarget",
      "stageVersion": "10",
      "configuration": [
        {
          "name": "conf.dataFormat",
          "value": "JSON"
        },
        {
          "name": "conf.messageKeyFormat",
          "value": "STRING"
        },
        {
          "name": "conf.dataGeneratorFormatConfig.charset",
          "value": "UTF-8"
        },
        {
          "name": "conf.dataGeneratorFormatConfig.csvFileFormat",
          "value": "CSV"
        },
        {
          "name": "conf.dataGeneratorFormatConfig.csvHeader",
          "value": "NO_HEADER"
        },
        {
          "name": "conf.dataGeneratorFormatConfig.csvReplaceNewLines",
          "value": true
        },
        {
          "name": "conf.dataGeneratorFormatConfig.csvReplaceNewLinesString",
          "value": " "
        },
        {
          "name": "conf.dataGeneratorFormatConfig.csvCustomDelimiter",
          "value": "|"
        },
        {
          "name": "conf.dataGeneratorFormatConfig.csvCustomEscape",
          "value": "\\"
        },
        {
          "name": "conf.dataGeneratorFormatConfig.csvCustomQuote",
          "value": "\""
        },
        {
          "name": "conf.dataGeneratorFormatConfig.csvQuoteMode",
          "value": "MINIMAL"
        },
        {
          "name": "conf.dataGeneratorFormatConfig.jsonMode",
          "value": "MULTIPLE_OBJECTS"
        },
        {
          "name": "conf.dataGeneratorFormatConfig.textFieldPath",
          "value": "/text"
        },
        {
          "name": "conf.dataGeneratorFormatConfig.textRecordSeparator",
          "value": "\\n"
        },
        {
          "name": "conf.dataGeneratorFormatConfig.textFieldMissingAction",
          "value": "ERROR"
        },
        {
          "name": "conf.dataGeneratorFormatConfig.textEmptyLineIfNull",
          "value": false
        },
        {
          "name": "conf.dataGeneratorFormatConfig.avroSchemaSource",
          "value": null
        },
        {
          "name": "conf.dataGeneratorFormatConfig.avroSchema",
          "value": null
        },
        {
          "name": "conf.dataGeneratorFormatConfig.registerSchema",
          "value": false
        },
        {
          "name": "conf.dataGeneratorFormatConfig.schemaRegistryUrlsForRegistration",
          "value": [
            ""
          ]
        },
        {
          "name": "conf.dataGeneratorFormatConfig.schemaRegistryUrls",
          "value": [
            ""
          ]
        },
        {
          "name": "conf.dataGeneratorFormatConfig.basicAuthUserInfo",
          "value": null
        },
        {
          "name": "conf.dataGeneratorFormatConfig.schemaLookupMode",
          "value": "SUBJECT"
        },
        {
          "name": "conf.dataGeneratorFormatConfig.subject",
          "value": null
        },
        {
          "name": "conf.dataGeneratorFormatConfig.subjectToRegister",
          "value": null
        },
        {
          "name": "conf.dataGeneratorFormatConfig.basicAuthUserInfoForRegistration",
          "value": null
        },
        {
          "name": "conf.dataGeneratorFormatConfig.schemaId",
          "value": null
        },
        {
          "name": "conf.dataGeneratorFormatConfig.includeSchema",
          "value": true
        },
        {
          "name": "conf.dataGeneratorFormatConfig.avroCompression",
          "value": "NULL"
        },
        {
          "name": "conf.dataGeneratorFormatConfig.binaryFieldPath",
          "value": "/"
        },
        {
          "name": "conf.dataGeneratorFormatConfig.protoDescriptorFile",
          "value": null
        },
        {
          "name": "conf.dataGeneratorFormatConfig.messageType",
          "value": null
        },
        {
          "name": "conf.dataGeneratorFormatConfig.fileNameEL",
          "value": null
        },
        {
          "name": "conf.dataGeneratorFormatConfig.wholeFileExistsAction",
          "value": "TO_ERROR"
        },
        {
          "name": "conf.dataGeneratorFormatConfig.includeChecksumInTheEvents",
          "value": false
        },
        {
          "name": "conf.dataGeneratorFormatConfig.checksumAlgorithm",
          "value": "MD5"
        },
        {
          "name": "conf.dataGeneratorFormatConfig.xmlPrettyPrint",
          "value": true
        },
        {
          "name": "conf.dataGeneratorFormatConfig.xmlValidateSchema",
          "value": false
        },
        {
          "name": "conf.dataGeneratorFormatConfig.xmlSchema",
          "value": null
        },
        {
          "name": "conf.connectionConfig.connectionSelection",
          "value": "MANUAL"
        },
        {
          "name": "conf.connectionConfig.connection.metadataBrokerList",
          "value": "10.10.14.43:9092"
        },
        {
          "name": "conf.connectionConfig.connection.securityConfig.securityOption",
          "value": "PLAINTEXT"
        },
        {
          "name": "conf.connectionConfig.connection.securityConfig.saslMechanism",
          "value": "GSSAPI"
        },
        {
          "name": "conf.connectionConfig.connection.securityConfig.kerberosServiceName",
          "value": null
        },
        {
          "name": "conf.connectionConfig.connection.securityConfig.provideKeytab",
          "value": false
        },
        {
          "name": "conf.connectionConfig.connection.securityConfig.userKeytab",
          "value": null
        },
        {
          "name": "conf.connectionConfig.connection.securityConfig.userPrincipal",
          "value": "user/host@REALM"
        },
        {
          "name": "conf.connectionConfig.connection.securityConfig.truststoreType",
          "value": "JKS"
        },
        {
          "name": "conf.connectionConfig.connection.securityConfig.truststoreFile",
          "value": null
        },
        {
          "name": "conf.connectionConfig.connection.securityConfig.truststorePassword",
          "value": null
        },
        {
          "name": "conf.connectionConfig.connection.securityConfig.keystoreType",
          "value": "JKS"
        },
        {
          "name": "conf.connectionConfig.connection.securityConfig.keystoreFile",
          "value": null
        },
        {
          "name": "conf.connectionConfig.connection.securityConfig.keystorePassword",
          "value": null
        },
        {
          "name": "conf.connectionConfig.connection.securityConfig.keyPassword",
          "value": null
        },
        {
          "name": "conf.connectionConfig.connection.securityConfig.enabledProtocols",
          "value": "TLSv1.2"
        },
        {
          "name": "conf.runtimeTopicResolution",
          "value": false
        },
        {
          "name": "conf.topicExpression",
          "value": "${record:value('/topic')}"
        },
        {
          "name": "conf.topicWhiteList",
          "value": "*"
        },
        {
          "name": "conf.topic",
          "value": "test"
        },
        {
          "name": "conf.partitionStrategy",
          "value": "DEFAULT"
        },
        {
          "name": "conf.partition",
          "value": "${0}"
        },
        {
          "name": "conf.singleMessagePerBatch",
          "value": false
        },
        {
          "name": "conf.keySerializer",
          "value": "STRING"
        },
        {
          "name": "conf.valueSerializer",
          "value": "DEFAULT"
        },
        {
          "name": "conf.kafkaProducerConfigs",
          "value": []
        },
        {
          "name": "conf.overrideConfigurations",
          "value": false
        },
        {
          "name": "conf.avroMessageKey",
          "value": "${avro:decode(record:attribute('avroKeySchema'),base64:decodeBytes(record:attribute('kafkaMessageKey')))}"
        },
        {
          "name": "conf.stringMessageKey",
          "value": "${record:attribute('kafkaMessageKey')}"
        },
        {
          "name": "responseConf.sendResponseToOrigin",
          "value": false
        },
        {
          "name": "responseConf.responseType",
          "value": "SUCCESS_RECORDS"
        },
        {
          "name": "stageOnRecordError",
          "value": "TO_ERROR"
        },
        {
          "name": "stageRequiredFields",
          "value": []
        },
        {
          "name": "stageRecordPreconditions",
          "value": []
        }
      ],
      "services": [],
      "uiInfo": {
        "description": "",
        "displayMode": "ADVANCED",
        "icon": "kafka.png",
        "label": "Kafka Producer 1",
        "stageType": "TARGET",
        "xPos": 568,
        "yPos": 67.5
      },
      "inputLanes": [
        "JavaScriptEvaluator_01OutputLane16336119381710"
      ],
      "outputLanes": [],
      "eventLanes": []
    }
  ],
  "errorStage": {
    "instanceName": "errorStageStageInstance",
    "library": "streamsets-datacollector-basic-lib",
    "stageName": "com_streamsets_pipeline_stage_destination_devnull_ToErrorNullDTarget",
    "stageVersion": "1",
    "configuration": [],
    "services": [],
    "uiInfo": {
      "label": "Error -Discard",
      "stageType": "TARGET"
    },
    "inputLanes": [],
    "outputLanes": [],
    "eventLanes": []
  },
  "testOriginStage": {
    "instanceName": "com_streamsets_pipeline_stage_devtest_rawdata_RawDataDSource_TestOriginStage",
    "library": "streamsets-datacollector-dev-lib",
    "stageName": "com_streamsets_pipeline_stage_devtest_rawdata_RawDataDSource",
    "stageVersion": "3",
    "configuration": [
      {
        "name": "rawData",
        "value": "{\n  \"f1\": \"abc\",\n  \"f2\": \"xyz\",\n  \"f3\": \"lmn\"\n}"
      },
      {
        "name": "stopAfterFirstBatch",
        "value": false
      },
      {
        "name": "eventData",
        "value": null
      },
      {
        "name": "stageOnRecordError",
        "value": "TO_ERROR"
      }
    ],
    "services": [
      {
        "service": "com.streamsets.pipeline.api.service.dataformats.DataFormatParserService",
        "serviceVersion": 3,
        "configuration": [
          {
            "name": "displayFormats",
            "value": "DELIMITED,JSON,LOG,SDC_JSON,TEXT,XML"
          },
          {
            "name": "dataFormat",
            "value": "JSON"
          },
          {
            "name": "dataFormatConfig.compression",
            "value": "NONE"
          },
          {
            "name": "dataFormatConfig.filePatternInArchive",
            "value": "*"
          },
          {
            "name": "dataFormatConfig.charset",
            "value": "UTF-8"
          },
          {
            "name": "dataFormatConfig.removeCtrlChars",
            "value": false
          },
          {
            "name": "dataFormatConfig.textMaxLineLen",
            "value": 1024
          },
          {
            "name": "dataFormatConfig.useCustomDelimiter",
            "value": false
          },
          {
            "name": "dataFormatConfig.customDelimiter",
            "value": "\\r\\n"
          },
          {
            "name": "dataFormatConfig.includeCustomDelimiterInTheText",
            "value": false
          },
          {
            "name": "dataFormatConfig.jsonContent",
            "value": "MULTIPLE_OBJECTS"
          },
          {
            "name": "dataFormatConfig.jsonMaxObjectLen",
            "value": 4096
          },
          {
            "name": "dataFormatConfig.csvHeader",
            "value": "NO_HEADER"
          },
          {
            "name": "dataFormatConfig.csvFileFormat",
            "value": "CSV"
          },
          {
            "name": "dataFormatConfig.csvCustomDelimiter",
            "value": "|"
          },
          {
            "name": "dataFormatConfig.multiCharacterFieldDelimiter",
            "value": "||"
          },
          {
            "name": "dataFormatConfig.multiCharacterLineDelimiter",
            "value": "${str:unescapeJava('\\\\n')}"
          },
          {
            "name": "dataFormatConfig.csvCustomEscape",
            "value": "\\"
          },
          {
            "name": "dataFormatConfig.csvCustomQuote",
            "value": "\""
          },
          {
            "name": "dataFormatConfig.csvUnivocityFieldSeparator",
            "value": ","
          },
          {
            "name": "dataFormatConfig.csvUnivocityEscape",
            "value": "\\"
          },
          {
            "name": "dataFormatConfig.csvUnivocityQuote",
            "value": "\""
          },
          {
            "name": "dataFormatConfig.csvUnivocityLineSeparator",
            "value": "${str:unescapeJava('\\\\n')}"
          },
          {
            "name": "dataFormatConfig.csvParser",
            "value": "LEGACY_PARSER"
          },
          {
            "name": "dataFormatConfig.csvAllowExtraColumns",
            "value": false
          },
          {
            "name": "dataFormatConfig.csvExtraColumnPrefix",
            "value": "_extra_"
          },
          {
            "name": "dataFormatConfig.csvMaxObjectLen",
            "value": 1024
          },
          {
            "name": "dataFormatConfig.csvUnivocityMaxColumns",
            "value": 1000
          },
          {
            "name": "dataFormatConfig.csvUnivocityMaxCharsPerColumn",
            "value": 1000
          },
          {
            "name": "dataFormatConfig.csvUnivocitySkipEmptyLines",
            "value": false
          },
          {
            "name": "dataFormatConfig.csvUnivocityAllowComments",
            "value": false
          },
          {
            "name": "dataFormatConfig.csvUnivocityCommentMarker",
            "value": "#"
          },
          {
            "name": "dataFormatConfig.csvEnableComments",
            "value": false
          },
          {
            "name": "dataFormatConfig.csvCommentMarker",
            "value": "#"
          },
          {
            "name": "dataFormatConfig.csvIgnoreEmptyLines",
            "value": false
          },
          {
            "name": "dataFormatConfig.csvRecordType",
            "value": "LIST_MAP"
          },
          {
            "name": "dataFormatConfig.csvSkipStartLines",
            "value": 0
          },
          {
            "name": "dataFormatConfig.parseNull",
            "value": false
          },
          {
            "name": "dataFormatConfig.nullConstant",
            "value": "\\\\N"
          },
          {
            "name": "dataFormatConfig.xmlRecordElement",
            "value": null
          },
          {
            "name": "dataFormatConfig.preserveRootElement",
            "value": false
          },
          {
            "name": "dataFormatConfig.includeFieldXpathAttributes",
            "value": false
          },
          {
            "name": "dataFormatConfig.xPathNamespaceContext",
            "value": []
          },
          {
            "name": "dataFormatConfig.outputFieldAttributes",
            "value": false
          },
          {
            "name": "dataFormatConfig.xmlMaxObjectLen",
            "value": 4096
          },
          {
            "name": "dataFormatConfig.logMode",
            "value": "COMMON_LOG_FORMAT"
          },
          {
            "name": "dataFormatConfig.logMaxObjectLen",
            "value": 1024
          },
          {
            "name": "dataFormatConfig.retainOriginalLine",
            "value": false
          },
          {
            "name": "dataFormatConfig.customLogFormat",
            "value": "%h %l %u %t \"%r\" %\u003es %b"
          },
          {
            "name": "dataFormatConfig.regex",
            "value": "^(\\S+) (\\S+) (\\S+) \\[([\\w:/]+\\s[+\\-]\\d{4})\\] \"(\\S+) (\\S+) (\\S+)\" (\\d{3}) (\\d+)"
          },
          {
            "name": "dataFormatConfig.fieldPathsToGroupName",
            "value": [
              {
                "fieldPath": "/",
                "group": 1
              }
            ]
          },
          {
            "name": "dataFormatConfig.grokPatternDefinition",
            "value": null
          },
          {
            "name": "dataFormatConfig.grokPattern",
            "value": "%{COMMONAPACHELOG}"
          },
          {
            "name": "dataFormatConfig.onParseError",
            "value": "ERROR"
          },
          {
            "name": "dataFormatConfig.maxStackTraceLines",
            "value": 50
          },
          {
            "name": "dataFormatConfig.enableLog4jCustomLogFormat",
            "value": false
          },
          {
            "name": "dataFormatConfig.log4jCustomLogFormat",
            "value": "%r [%t] %-5p %c %x - %m%n"
          },
          {
            "name": "dataFormatConfig.avroSchemaSource",
            "value": null
          },
          {
            "name": "dataFormatConfig.avroSchema",
            "value": null
          },
          {
            "name": "dataFormatConfig.schemaRegistryUrls",
            "value": []
          },
          {
            "name": "dataFormatConfig.basicAuth",
            "value": null
          },
          {
            "name": "dataFormatConfig.schemaLookupMode",
            "value": "SUBJECT"
          },
          {
            "name": "dataFormatConfig.subject",
            "value": null
          },
          {
            "name": "dataFormatConfig.schemaId",
            "value": null
          },
          {
            "name": "dataFormatConfig.avroSkipUnionIndex",
            "value": false
          },
          {
            "name": "dataFormatConfig.protoDescriptorFile",
            "value": null
          },
          {
            "name": "dataFormatConfig.messageType",
            "value": null
          },
          {
            "name": "dataFormatConfig.isDelimited",
            "value": false
          },
          {
            "name": "dataFormatConfig.binaryMaxObjectLen",
            "value": 1024
          },
          {
            "name": "dataFormatConfig.datagramMode",
            "value": "SYSLOG"
          },
          {
            "name": "dataFormatConfig.typesDbPath",
            "value": null
          },
          {
            "name": "dataFormatConfig.convertTime",
            "value": false
          },
          {
            "name": "dataFormatConfig.excludeInterval",
            "value": false
          },
          {
            "name": "dataFormatConfig.authFilePath",
            "value": null
          },
          {
            "name": "dataFormatConfig.netflowOutputValuesMode",
            "value": "RAW_AND_INTERPRETED"
          },
          {
            "name": "dataFormatConfig.maxTemplateCacheSize",
            "value": -1
          },
          {
            "name": "dataFormatConfig.templateCacheTimeoutMs",
            "value": -1
          },
          {
            "name": "dataFormatConfig.netflowOutputValuesModeDatagram",
            "value": "RAW_AND_INTERPRETED"
          },
          {
            "name": "dataFormatConfig.maxTemplateCacheSizeDatagram",
            "value": -1
          },
          {
            "name": "dataFormatConfig.templateCacheTimeoutMsDatagram",
            "value": -1
          },
          {
            "name": "dataFormatConfig.wholeFileMaxObjectLen",
            "value": 8192
          },
          {
            "name": "dataFormatConfig.rateLimit",
            "value": "-1"
          },
          {
            "name": "dataFormatConfig.verifyChecksum",
            "value": false
          },
          {
            "name": "dataFormatConfig.excelHeader",
            "value": null
          },
          {
            "name": "dataFormatConfig.excelSkipCellsWithNoHeader",
            "value": false
          },
          {
            "name": "dataFormatConfig.excelReadAllSheets",
            "value": false
          },
          {
            "name": "dataFormatConfig.excelSheetNames",
            "value": []
          }
        ]
      }
    ],
    "uiInfo": {
      "label": "Test Origin - Dev Raw Data Source",
      "stageType": "SOURCE"
    },
    "inputLanes": [],
    "outputLanes": [
      "com_streamsets_pipeline_stage_devtest_rawdata_RawDataDSource_TestOriginStageOutputLane1"
    ],
    "eventLanes": []
  },
  "statsAggregatorStage": {
    "instanceName": "statsAggregatorStageInstance",
    "library": "streamsets-datacollector-basic-lib",
    "stageName": "com_streamsets_pipeline_stage_destination_devnull_StatsDpmDirectlyDTarget",
    "stageVersion": "1",
    "configuration": [],
    "services": [],
    "uiInfo": {
      "label": "Stats Aggregator -Write Directly to Control Hub - statistics are not aggregated across Data Collectors",
      "stageType": "TARGET"
    },
    "inputLanes": [],
    "outputLanes": [],
    "eventLanes": []
  },
  "previewable": true,
  "info": {
    "pipelineId": "localedgea0c69b40-c75a-4336-ab0a-5c0948040c68",
    "title": "local edge",
    "description": "",
    "created": 1633589577854,
    "lastModified": 1633698754,
    "creator": "admin",
    "lastModifier": "admin",
    "lastRev": "0",
    "uuid": "ed69163c-a651-4b35-b003-325956a62edf",
    "valid": true,
    "metadata": {
      "labels": []
    },
    "name": "localedgea0c69b40-c75a-4336-ab0a-5c0948040c68",
    "sdcVersion": "3.23.0-SNAPSHOT",
    "sdcId": "fbab752b-903b-11eb-9824-3fc8cb3839a8"
  },
  "metadata": {
    "labels": []
  },
  "fragments": []
}